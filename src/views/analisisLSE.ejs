<!DOCTYPE html>
<html lang="en">
<head>
    
    
    <%- include("partials/meta") %>
   
    <title>Inicio</title>
</head>
<body>
    <%- include("partials/header") %>
    
    <section id="pantalla-dividida">
        <%- include("partials/izquierda") %>

        
        <div class="derecha">
            <div class="borde">
            <center><h3>Análisis de complejidad computacional</h3></center> <!--Ponen el titulo del tema y abajo el contenido-->
            <br>
            <p>Las listas simplemente enlazadas, las listas doblemente enlazadas y las listas circulares son tres estructuras de datos diferentes que se utilizan en la programación para almacenar y acceder a una colección de elementos. Cada una de estas estructuras tiene sus propias ventajas y desventajas en términos de complejidad computacional, es decir, el tiempo y el espacio que requieren para realizar ciertas operaciones.</p>

            <p>A continuación, se presenta un análisis de complejidad computacional de las principales operaciones en cada una de estas estructuras:</p>

            <h5>Listas simplemente enlazadas:</h5>
            <li>Inserción al principio: O(1)</li>
            <li>Inserción al final: O(n)</li>
            <li>Inserción en posición intermedia: O(n)</li>
            <li>Eliminación al principio: O(1)</li>
            <li>Eliminación al final: O(n)</li>
            <li>Eliminación en posición intermedia: O(n)</li>
            <li>Búsqueda: O(n)</li>

            <h5>Listas doblemente enlazadas:</h5>
            <li>Inserción al principio: O(1)</li>
            <li>Inserción al final: O(1)</li>
            <li>Inserción en posición intermedia: O(1)</li>
            <li>Eliminación al principio: O(1)</li>
            <li>Eliminación al final: O(1)</li>
            <li>Eliminación en posición intermedia: O(1)</li>
            <li>Búsqueda: O(n)</li>

            <h5>Listas circulares:</h5>
            <li>Inserción al principio: O(1)</li>
            <li>Inserción al final: O(1)</li>
            <li>Inserción en posición intermedia: O(n)</li>
            <li>Eliminación al principio: O(1)</li>
            <li>Eliminación al final: O(n)</li>
            <li>Eliminación en posición intermedia: O(n)</li>
            <li>Búsqueda: O(n)</li>

            
            <p>Link de apoyo</p>
            <li><a href="https://www.geeksforgeeks.org/analysis-of-algorithms-set-1-asymptotic-analysis/">Análisis de complejidad computacional de algoritmos</a></li>
            <li><a href="https://www.tutorialspoint.com/data_structures_algorithms/complexity_of_algorithms.htm">Complejidad de algoritmos para estructuras de datos</a></li>

            <br />
            <div class="siguiente">
              <p>Siguiente tema:</p>
              <a href="/IEBBT">Árboles Binarios: operaciones de inserción, eliminación y busqueda >></a>
            </div>
    </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
</body>
</html>