<!DOCTYPE html>
<html lang="es">
<head>
    
    <%- include("partials/meta") %>
   
    <title>Inicio</title>
</head>
<body>
    <%- include("partials/header") %>
    
    <section id="pantalla-dividida">
        <%- include("partials/izquierda") %>

        
        <div class="derecha">
            <div class="borde">
            <center><h3>Estructura y diseño de una LSE</h3></center> <!--Ponen el titulo del tema y abajo el contenido-->
            <br>
            <p>Una lista simplemente enlazada es la más fundamental estructura de datos basada en punteros, y del concepto fundamental de ésta derivan las otras estructuras de datos. Consiste en una secuencia de nodos, en los que se guardan campos de datos arbitrarios y una o dos referencias (punteros) al nodo anterior o posterior. El principal beneficio de las listas enlazadas respecto a los array convencionales es que el orden de los elementos enlazados puede ser diferente al orden de almacenamiento en la memoria o el disco, permitiendo que el orden de recorrido de la lista sea diferente al de almacenamiento.</p>
            <p>En estas listas tenemos "nodos" que son objetos que se irán enlazando entre ellos para formar la lista completa. Los nodos tienen principalmente dos atributos: un atributo "contenido", usado para almacenar un objeto en donde se contendrá la información requerida; y otro atributo "siguiente", usado para hacer referencia al siguiente nodo de la lista.</p>
            <br>
            <center>
              <img src="https://2.bp.blogspot.com/-_8Z6R2RkZzI/VDCQgodrHJI/AAAAAAAABtA/Wh0hA-e3wZ8/s1600/lista.png">
            </center>
            <br>
            <p>Implementación:</p>
            <p>Para implementar una lista simple enlazada, se define una clase Nodo, la cual indica el tipo de los objetos guardados en los nodos de la lista. Para este caso se asume que los elementos son String (puede ser cualquier tipo). También es posible definir nodos que puedan guardar tipos arbitrarios de elementos.</p>
            <p>Dada la clase Nodo, se puede definir una clase, ListaSimple, definiendo la lista enlazada actual. Esta clase guarda una referencia al nodo cabeza y una variable va contando el número total de nodos.</p>

            <div class="panel-body">
                <pre>
                    <ol>
                        <li>/** Nodo de una lista simple enlazada de cadenas . */</li>
<li>public class Nodo {</li>
<li>private String elemento; // Los elementos son cadenas de caracteres</li>
<li>private Nodo sig;</li>
<li></li>
<li>/** Crea un nodo con el elemento dado y el nodo sig . */</li>
<li>public Nodo ( String s, Nodo n) {</li>
<li>elemento = s;</li>
<li>sig = n;</li>
<li>}</li>
<li></li>
<li></li>
<li>/** Lista simple enlazada . */</li>
<li>public class ListaSimple {</li>
<li>protected Nodo cabeza ; // nodo cabeza de la lista</li>
<li>protected long tam ; // cantidad de nodos en la lista</li>
<li></li>
<li>/** constructor por defecto que crea una lista vaca */</li>
<li>public ListaSimple () {</li>
<li>cabeza = null ;</li>
<li>tam = 0;</li>
<li>}</li>
<li></li>
<li>// ... métodos de actualización y búsqueda deberán ir aquí</li>
<li>}</li>
                    </ol>
                </pre>
            </div>

            <p>Links de apoyo</p>
            <li><a href="https://blog.martincruz.me/2012/10/listas-enlazadas-simples-en-c.html">Implementación en C++</a></li>
            <li><a href="https://www.techiedelight.com/es/linked-list-implementation-cpp/">Implementación de listas enlazadas en C++</a></li>            
            <li><a href="http://programacionparacoccidio.blogspot.com/2013/01/listas-enlazadas-en-c-orientado-objetos.html">Listas Enlazadas en C++ Orientado a Objetos</a></li>

            <br>
            <div class="siguiente">
                <p>Siguiente tema: </p>
                <a href="\IEBLSE">Operaciones Insertar, Eliminar y Buscar en LSE >></a>
            </div>
        </div>
    </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
</body>
</html>