<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="icon" href="img/iconoA.png"> 
    <link rel="stylesheet" href="css/style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Belgrano&display=swap" rel="stylesheet">
   
    <title>Inicio</title>
</head>
<body>
    <%- include("partials/header") %>
    
    <section id="pantalla-dividida">
        <%- include("partials/izquierda") %>

        
        <div class="derecha">
            <center><h3>Componentes Fuertemente conexos</h3></center> <!--Ponen el titulo del tema y abajo el contenido-->
            <br>
            <p>En teoría de grafos, un grafo dirigido es llamado fuertemente conexo si para cada par de vértices u y v existe un camino de u hacia v y un camino de v hacia u. Los componentes fuertemente conexos (CFC) de un grafo dirigido son sus subgrafos maximales fuertemente conexos. Estos subgrafos forman una partición del grafo.</p>
            <br>
            <p>Un subgrafo fuertemente conexo es maximal si contiene todos los vértices del grafo o si al agregarle un vértice cualquiera deja de ser fuertemente conexo.</p>
            <br>
            <p>El cálculo de los componentes fuertemente conexos de un grafo es uno de los problemas fundamentales de la Teoría de los grafos. El primer algoritmo que trabaja en tiempo lineal para resolver este problema fue propuesto por Robert Tarjan​ en 1970 a base de una búsqueda en profundidad (depth-first search). Otros algoritmos aparecen en los principales textos sobre algorítmica.</p>
            <br>
            <H3>Algoritmo de Kosaraju</H3>
            <br>
            <p>Para hallar las SCC (Componentes Fuertemente conexos) de un grafo dirigido G :</p>
            <br>
            <p>1. Realiza un DFS sobre G y enumera los vértices en orden de terminación de las llamadas recursivas.</p>
            <br>
            <pre>
                void dfs(int v){
                    visited[v] = true;
                    start[v] = count;
                    ++count;
                    
                    for(int i=G[v].size()-1;i>=0;--i){
                        if(!visited[G[v][i]]) dfs(G[v][i]);
                    }
                    
                    finish[v] = count;
                    ++count;
                }
            </pre>
            <br>
            <p>2. Construye un nuevo grafo G_T invirtiendo la dirección de todo arco en G.</p>
            <br>
            <p>3. Realiza un DFS sobre G_T empezando por el vértice que fue enumerado con el mayor valor de acuerdo a la numeración asignada en el paso (1). Si el DFS no alcanza todos los vértices, empieza el siguiente DFS desde el vértice restante enumerado con el mayor valor.</p>
            <br>
            <p>4. Cada árbol obtenido luego del DFS es una componente fuertemente conexa.</p>
            <br>
            <center>
                <img src="https://upload.wikimedia.org/wikipedia/commons/e/e1/Scc-1.svg" width="400">
            </center>
            <br>
            <h3>Implementacion en C++</h3>
            <br>
            <pre>
                #include < stack>
                    #include < queue>
                    #include < vector>
                    #include < cstring>
                    
                    using namespace std;
                    
                    #define MAX_V 500
                    
                    int V, num_scc, scc[MAX_V];
                    vector< vector< int> > G;
                    vector< vector< int> > GT;
                    bool visited[MAX_V];
                    stack< int> S;
                    queue< int> Q;
                    
                    void dfs(int v){
                        visited[v] = true;
                        
                        for(int i=G[v].size()-1;i>=0;--i)
                            if(!visited[G[v][i]])
                                dfs(G[v][i]);
                        
                        S.push(v);
                    }
                    
                    void bfs(int v){
                        Q.push(v);
                        visited[v] = true;
                        
                        int aux;
                        
                        while(!Q.empty()){
                            aux = Q.front();
                            scc[aux] = num_scc;
                            Q.pop();
                            
                            for(int i=GT[aux].size()-1;i>=0;i--){
                                if(!visited[GT[aux][i]]){
                                    Q.push(GT[aux][i]);
                                    visited[GT[aux][i]] = true;
                                }
                            }
                        }
                    }
                    void SCC(){
                        memset(visited,false,sizeof(visited));
                        
                        for(int i=0;i< V;++i) if(!visited[i]) dfs(i);
                        
                        num_scc = 0;
                        int aux;
                        
                        memset(visited,false,sizeof(visited));
                        
                        while(!S.empty()){
                            aux = S.top();
                            S.pop();
                            
                            if(!visited[aux]){
                                bfs(aux);
                                ++num_scc;
                            }
                        }
                    }
            </pre>
            <br>


            <p>Link de apoyo</p>
            <br>
            <li><a href="https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm">Kosaraju's algorithm</a></li>
            <br>
            <li><a href="https://runestone.academy/ns/books/published/pythoned/Graphs/ComponentesFuertementeConectados.html">Componentes fuertemente conectados</a></li>
            <br>           
            <li><a href="https://www.wikiwand.com/es/Componente_fuertemente_conexo">Componente fuertemente conexo</a></li>
        </div>
    </section>
</body>
</html>